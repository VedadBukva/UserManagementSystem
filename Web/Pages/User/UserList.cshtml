@page
@model UserListModel
@{
    ViewData["Title"] = "User list";
}
<div class="card card-custom" style="align-self:center;">
    <div class="card-body">
        <div class="filter mb-5">
            <div class="row mt-2 mb-6">
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>First name:</label>
                    @Html.TextBoxFor(m => m.UserModel.FirstName, "", new { @class = "form-control" })
                </div>
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>Last name:</label>
                    @Html.TextBoxFor(m => m.UserModel.LastName, "", new { @class = "form-control" })
                </div>
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>Username:</label>
                    @Html.TextBoxFor(m => m.UserModel.Username, "", new { @class = "form-control" })
                </div>

            </div>
            <div class="row mb-6">
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>Password:</label>
                    @Html.TextBoxFor(m => m.UserModel.Password, "", new { @class = "form-control" })
                </div>
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>Email:</label>
                    @Html.TextBoxFor(m => m.UserModel.Email, "", new { @class = "form-control" })
                </div>
                <div class="col-lg-4 mb-lg-0 mb-6">
                    <label>Status:</label>
                    @Html.DropDownListFor(m => m.UserModel.Status, new SelectList(new List<string> { "", "Active", "Inactive" }), new { @class = "form-control select-filter" })
                </div>
            </div>
        </div>
        <div class="text-center" id="tablePartialView">
            <partial name="_Table" model="@Model.UserListViewModel" />
        </div>
    </div>
</div>

@section Scripts {
    <script>
    document.addEventListener("DOMContentLoaded", function (event) {
        var filterInputs = document.getElementsByClassName("form-control");
        var filterSelect = document.getElementsByClassName("select-filter")[0];
        for (let i = 0; i < filterInputs.length; i++) {
            filterInputs[i].addEventListener("keyup", () => {
                Search('@Model.PaginationQueryDto.SortBy', '@Model.PaginationQueryDto.OrderBy', @Model.PaginationDto.Page);
            });
        }
        filterSelect.addEventListener("change", () => {
                Search('@Model.PaginationQueryDto.SortBy', '@Model.PaginationQueryDto.OrderBy', @Model.PaginationDto.Page);
        });
    });


    function Search(sortBy, orderBy, page) {
        var model = {
            UserModel: {
                FirstName: $("#UserModel_FirstName").val(),
                LastName: $("#UserModel_LastName").val(),
                Username: $("#UserModel_Username").val(),
                Password: $("#UserModel_Password").val(),
                Email: $("#UserModel_Email").val(),
                Status: $("#UserModel_Status").val()
            },
            PaginationQueryDto: {
                sortBy: sortBy,
                orderBy: orderBy,
                page: page,
                pageSize: 10
            }
        };
        console.log(model);
        $.ajax({
            type: 'POST',
            url: '?handler=Search',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: model,
            success: function (data) {
                $("#tablePartialView").html(data);
            },
            error: function (errorMessage) {
                Swal.fire("Error", "An error occured while fetching data!", "error");
            }
        });
    }

    function SortByColumn(sortBy, orderBy, page) {
        if (orderBy == '') {
            orderBy = 'DESC';
        }
        if (orderBy == 'DESC')
            orderBy = 'ASC';
        else if (orderBy == 'ASC')
            orderBy = 'DESC';

        var model = {
            UserModel: {
                FirstName: $("#UserModel_FirstName").val(),
                LastName: $("#UserModel_LastName").val(),
                Username: $("#UserModel_Username").val(),
                Password: $("#UserModel_Password").val(),
                Email: $("#UserModel_Email").val(),
                Status: $("#UserModel_Status").val()
            },
            PaginationQueryDto: {
                sortBy: sortBy,
                orderBy: orderBy,
                page: page,
                pageSize: 10
            }
        };
        $.ajax({
            type: 'POST',
            url: '?handler=Search',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: model,
            success: function (data) {
                $("#tablePartialView").html(data);
            },
            error: function (errorMessage) {
                Swal.fire("Error", "An error occured while fetching data!", "error");
            }
        });
    }

    function DeleteUser(guid) {
        var model = {
            Guid: guid,
            UserModel: {},
            PaginationQueryDto: {
                sortBy: '@Model.PaginationQueryDto.SortBy',
                orderBy: '@Model.PaginationQueryDto.OrderBy',
                page: @Model.PaginationDto.Page,
                pageSize: 10
            }
        };
        Swal.fire({
            text: 'Are you sure you want to delete this user?',
            icon: "error",
            showCancelButton: true,
            buttonsStyling: false,
            customClass: {
                confirmButton: "btn font-weight-bold btn-primary",
                cancelButton: "btn font-weight-bold btn-default"
            }
        }).then(function (result) {
            if (result.value) {
                $.ajax({
                    type: "DELETE",
                    url: "/",
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("RequestVerificationToken",
                            $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    data: model,
                    success: function (data) {
                        if (data.statusMessage === "error") {
                            Swal.fire("Error", "An error occured while deleting user!", "error");
                        }
                        else {
                            Swal.fire("Success", "Successfully deleted user!", "success");
                            $("#tablePartialView").html(data);
                        }
                    }
                });
            }
        });
    }

    function EditUser(guid) {
        location.href = "/User/EditUser?guid="+guid;
    }

    function AssignPermission(guid) {
        location.href = "/Permission/AssignPermission?guid=" + guid;
    }
    </script>
}

